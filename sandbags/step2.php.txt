<style type="text/css">

	.sandbag-right {
		border: 0; 
		padding: 0;
		font-size: 0;
		margin: 0 0 0 35px;
		float: right; 
		clear: right;
		background: red;
	}
	
</style>

<?php

// For this step we'll put everything in to a function to
// keep it all in one neat place

function alignedImage($imageName,$sandbagHeight = 10) {
    
    // We're going to enforce a 2px minimum on the sandbag height
    if ($sandbagHeight < 2) {$sandbagHeight = 2;}
    
    $image = imagecreatefrompng($imageName);
    $width = imagesx($image);
    $height = imagesy($image);
    
    // Our original loop remains entirely unchanged
    for ($y=0; $y<$height; $y++) {
        $imagemap[$y] = 0;
  
        for ($x=0; $x<$width; $x++) {
            $colorBreakdown = imagecolorsforindex($image, (imagecolorat($image, $x, $y)));
            if ($colorBreakdown['alpha'] < 127) {
                break;
            } else {
                $imagemap[$y]++;
            }
        }
    }
    
    // In this second loop we 'cluster' the perfect array
            
    for($i=0;$i < count($imagemap); $i = $i+$sandbagHeight) {
        for($x=0;$x < $sandbagHeight; $x++) {
            $b = $x + $i;
            if(isset($imagemap[$b])) {
                $section[$b] = $imagemap[$b];
            }
        }
        $sandbag[] = min($section); // it's important to remember why we want to use 'min' not 'max'
        unset($section);
    }
            
    // We specify the template for our sandbag here, we've added 'height'
    $sandbagTemplate = '<div class="sandbag-right" style="width: %dpx; height: %dpx;"></div>';
    
    // Here we actually create the sandbags
    foreach ($sandbag as $position => $blankPixels) {
        $sandbagWidth = $width-$blankPixels;
        printf($sandbagTemplate,$sandbagWidth,$sandbagHeight);
    }

}

// As we've now created a function we need to call that function
alignedImage('an_image.png', 14);

?>